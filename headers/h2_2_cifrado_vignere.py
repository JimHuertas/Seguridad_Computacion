
mod_191_num = {
    0: "!", 1: "\"", 2: "#", 3: "$", 4: "%", 5: "&", 6: "'", 7: "(", 8: ")", 9: "*", 
    10: "+", 11: ",", 12: "-", 13: ".", 14: "/", 15: "0", 16: "1", 17: "2", 18: "3", 
    19: "4", 20: "5", 21: "6", 22: "7", 23: "8", 24: "9", 25: ":", 26: ";", 27: "<", 
    28: "=", 29: ">", 30: "?", 31: "@", 32: "A", 33: "B", 34: "C", 35: "D", 36: "E", 
    37: "F", 38: "G", 39: "H", 40: "I", 41: "J", 42: "K", 43: "L", 44: "M", 45: "N", 
    46: "O", 47: "P", 48: "Q", 49: "R", 50: "S", 51: "T", 52: "U", 53: "V", 54: "W", 
    55: "X", 56: "Y", 57: "Z", 58: "[", 59: "\\", 60: "]", 61: "^", 62: "_", 63: "`",
    64: "a", 65: "b", 66: "c", 67: "d", 68: "e", 69: "f", 70: "g", 71: "h", 72: "i", 
    73: "j", 74: "k", 75: "l", 76: "m", 77: "n", 78: "o", 79: "p", 80: "q", 81: "r", 
    82: "s", 83: "t", 84: "u", 85: "v", 86: "w", 87: "x", 88: "y", 89: "z", 90: "{", 
    91: "|", 92: "}", 93: "~", 94 : "\u2018", 95 : "\u2019", 96: "¡", 97: "¢", 
    98: "£", 99: "¤", 100: "¥", 101: "¦", 102: "§", 103: "¨", 104: "©", 105: "ª", 106: "«", 
    107: "¬", 108: "▬", 109: "®", 110: "¯", 111: "°", 112: "±", 113: "²", 114: "³", 115: chr(180),
    116: "µ", 117: "¶", 118: "·", 119: chr(184), 120: "¹", 121: "º", 122: "»", 123: "¼", 
    124: "½", 125: "¾", 126: "¿", 127: "À", 128: "Á", 129: "Â", 130: "Ã", 131: "Ä", 132: "Å", 
    133: "Æ", 134: "Ç", 135: "È", 136: "É", 137: "Ê", 138: "Ë", 139: "Ì", 140: "Í", 141: "Î", 
    142: "Ï", 143: "Ð", 144: "Ñ", 145: "Ò", 146: "Ó", 147: "Ô", 148: "Õ", 149: "Ö", 150: chr(215),
    151: "Ø", 152: "Ù", 153: "Ú", 154: "Û", 155: "Ü", 156: "Ý", 157: "Þ", 158: "ß", 159: "à",
    160: "á", 161: "â", 162: "ã", 163: "ä", 164: "å", 165: "æ", 166: "ç", 167: "è", 168: "é",
    169: "ê", 170: "ë", 171: "ì", 172: "í", 173: "î", 174: "ï", 175: "ð", 176: "ñ", 177: "ò", 
    178: "ó", 179: "ô", 180: "õ", 181: "ö", 182: "÷", 183: "ø", 184: "ù", 185: "ú", 186: "û", 
    187: "ü", 188: "ý", 189: "þ", 190: "ÿ"
}

mod_191_abc = {
    "!":0 ,"\"":1, "#":2 , "$":3 , "%":4 , "&":5 , "'":6 , "(":7 , ")":8 , "*":9 , 
    "+":10, ",":11, "-":12, ".":13, "/":14, "0":15, "1":16, "2":17, "3":18, 
    "4":19, "5":20, "6":21, "7":22, "8":23, "9":24, ":":25, ";":26, "<":27, 
    "=":28, ">":29, "?":30, "@":31, "A":32, "B":33, "C":34, "D":35, "E":36, 
    "F":37, "G":38, "H":39, "I":40, "J":41, "K":42, "L":43, "M":44, "N":45, 
    "O":46, "P":47, "Q":48, "R":49, "S":50, "T":51, "U":52, "V":53, "W":54, 
    "X":55, "Y":56, "Z":57, "[":58, "\\":59, "]":60, "^":61, "_":62, "`":63,
    "a":64, "b":65, "c":66, "d":67, "e":68, "f":69, "g":70, "h":71, "i":72, 
    "j":73, "k":74, "l":75, "m":76, "n":77, "o":78, "p":79, "q":80, "r":81, 
    "s":82, "t":83, "u":84, "v":85, "w":86, "x":87, "y":88, "z":89, "{":90, 
    "|":91, "}":92, "~":93, "\u2018":94, "\u2019":95, "¡":96, "¢":97, 
    "£":98,"¤":99, "¥":100, "¦":101, "§":102, "¨":103, "©":104, "ª":105, "«":106, 
    "¬":107, "▬":108, "®":109, "¯":110, "°":111, "±":112, "²":113, "³":114, chr(180):115,
    "µ":116, "¶":117, "·":118, chr(184):119, "¹":120, "º":121, "»":122, "¼":123, 
    "½":124, "¾":125, "¿":126, "À":127, "Á":128, "Â":129, "Ã":130, "Ä":131, "Å":132, 
    "Æ":133, "Ç":134, "È":135, "É":136, "Ê":137, "Ë":138, "Ì":139, "Í":140, 141: "Î", 
    "Ï":142, "Ð":143, "Ñ":144, "Ò":145, "Ó":146, "Ô":147, "Õ":148, "Ö":149, chr(215):115,
    "Ø":151, "Ù":152, "Ú":153, "Û":154, "Ü":155, "Ý":156, "Þ":157, "ß":158, "à":159,
    "á":160, "â":161, "ã":162, "ä":163, "å":164, "æ":165, "ç":166, "è":167, "é":168,
    "ê":169, "ë":170, "ì":171, "í":172, "î":173, "ï":174, "ð":175, "ñ":176, "ò":177, 
    "ó":178, "ô":179, "õ":180, "ö":181, "÷":182, "ø":183, "ù":184, "ú":185, "û":186, 
    "ü":187, "ý":188, "þ":189, "ÿ":190
}

map_num27 = {
    0:'A', 1:'B', 2:'C', 3:'D', 4:'E', 5:'F', 6:'G', 7:'H', 8:'I', 
    9:'J', 10:'K', 11:'L', 12:'M', 13:'N', 14:'\u00d1', 15:'O', 16:'P', 
    17:'Q', 18:'R', 19:'S', 20:'T', 21:'U', 22:'V', 23:'W', 24:'X',
    25:'Y', 26:'Z'
}

map_abc27 = {
    'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7, 'I':8, 
    'J':9, 'K':10, 'L':11, 'M':12, 'N':13, '\u00d1':14, 'O':15, 'P':16, 
    'Q':17, 'R':18, 'S':19, 'T':20, 'U':21, 'V':22, 'W':23, 'X':24, 
    'Y':25, 'Z':26
}

map_tildes = ['á','é', 'í', 'ó','ú']
def isTilde(chr):
    for i in map_tildes:
        if(chr == i):
            return True
    return False

def normalize(s):
    replacements = (
        ("á", "a"),
        ("é", "e"),
        ("í", "i"),
        ("ó", "o"),
        ("ú", "u"),
    )
    for a, b in replacements:
        s = s.replace(a, b).replace(a.upper(), b.upper())
    return s

def vignere_27(line, clave, n=27):
    cifrado = ""
    clave = clave.upper()
    cont = 0
    for i in line:
        if(i == '\n'):
            continue
        elif(i == ' '):
            continue
        elif(isTilde(i)):
            i = normalize(i.upper())
        if(ord(i)>= 97 and 122>=ord(i) or i=='\xf1'):
            actual = clave[cont % len(clave)]
            nro_desplazamiento = (map_abc27[i.upper()]+ map_abc27[actual])%n
            cifrado += map_num27[nro_desplazamiento]
            cont+=1
        elif(ord(i)>= 65 and 90>=ord(i) or i=='\u00d1'):
            actual = clave[cont % len(clave)]
            nro_desplazamiento = (map_abc27[i]+ map_abc27[actual])%n
            cifrado += map_num27[nro_desplazamiento]
            cont+=1
        else:
            continue 
    return cifrado

def vignere_191(line, clave, n=191):
    cifrado = ""
    clave = clave.upper()
    cont = 0
    for i in line:
        if(i == '\n'):
            continue
        elif(i == ' '):
            continue
        actual = clave[cont % len(clave)]
        nro_desplazamiento = (mod_191_abc[i]+ mod_191_abc[actual])%n
        cifrado += mod_191_num[nro_desplazamiento]
        cont+=1
    return cifrado

def cifrado_vignere(M, clave, mod):
    cifrado = ""
    lines = list()
    with open(M) as txt:
        lines = txt.readlines()
        for line in lines:
            if(mod == 1):#27
                cifrado = vignere_27(line,clave)
            else:#mod 191
                cifrado = vignere_191(line,clave)
        return cifrado

def decifrado_vignere(M, clave, n=27):
    decifrado = ""
    clave = clave.upper()
    cont = 0
    for i in M:
        actual = clave[cont % len(clave)]
        nro_desplazamiento = (map_abc27[i] - map_abc27[actual])%n
        decifrado += map_num27[nro_desplazamiento]
        cont+=1
    return decifrado